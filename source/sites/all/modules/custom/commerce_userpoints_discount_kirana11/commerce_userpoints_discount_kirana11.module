<?php

/**
 * @file
 * Discount/offers/loyalty for Kirana11.
 */

/**
 * Implements hook_init().
 */
function commerce_userpoints_discount_kirana11_init() {
  drupal_add_js(drupal_get_path('module', 'commerce_userpoints_discount_kirana11') . '/js/script.js');
}

/**
 * Implements hook_commerce_cp_info().
 */
function _____commerce_userpoints_discount_kirana11_commerce_cp_info()
{
  $cart_panes = array();

  $cart_panes['royalty_reward'] = array(
    'name' => t('Royalty reward'),
    'pane callback' => 'royalty_reward_info_pane',
    'page' => 'cart',
  );

  return $cart_panes;
}

function ______royalty_reward_info_pane($form, $form_state, $cart_order, $pane_weight) {
  $form_pane = array();

  if (isset($_SESSION['k11_remaining_discount_amount']) && $_SESSION['k11_remaining_discount_amount'] > 0) {
    $form_pane['discount_info'] = array(
      //'#markup' => '<span>' . t('Apply Loyalty Rewards acquired | ') .'<strong>' . $_SESSION['k11_remaining_discount_amount'] . '</strong></span>',
      '#markup' => '<span>' . t('Apply Loyalty Rewards acquired') .'</span>',
      '#weight' => $pane_weight,
      '#prefix' => '<div id="loyalty"><h3 class="loyalty-title">' . ('Loyalty Rewards') . '</h3><div class="loyalty-input"><input type="checkbox" ' . (isset($_SESSION['k11_royalty_set']) && $_SESSION['k11_royalty_set'] == 1 ? 'checked="checked"' : '') . ' name="loyalty_required" id="loyalty_required" />',
      '#suffix' => '</div>',
    );
  }

  return $form_pane;
}

function commerce_userpoints_discount_kirana11_menu() {
  $items = array();

  $items['apply_k11_userpoints/%'] = array(
    'title' => t('Apply K11 userpoints'),
    'page callback' => 'apply_k11_userpoints_callback',
    'access arguments' => array('access content'),
    'page arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function commerce_userpoints_discount_kirana11_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id) {
  global $user;

  $grand_total = 0;
  $order_details = [];

  foreach($form_state['build_info']['args'][0]->result as $cart_total) {
    $grand_total +=  floatval($cart_total->_field_data['commerce_line_item_field_data_commerce_line_items_line_item_']['entity']->commerce_total['und'][0]['amount'] / 100);
    $order_id = $cart_total->_field_data['commerce_line_item_field_data_commerce_line_items_line_item_']['entity']->order_id;

    $order_details[$order_id]['order_id'] = $order_id;

    $line_item_id = commerce_userpoints_discount_order_has_userpoint_line_item($order_id);

    // If there is no existing userpoints line item, we create a new one.
    if ($line_item_id != NULL) {
      $_SESSION['k11_royalty_set'] = 1;
    }
  }

  // To avoid order_id repeat
  $order_details = array_values($order_details);

  $grand_total = number_format((float)$grand_total, 2, '.', '');

  $currencies = commerce_userpoints_currencies();

  $default_currency = reset($currencies);

  if (isset($form_state['values']['commerce_userpoints_discount']['currency'])) {
    $currency_code = $form_state['values']['commerce_userpoints_discount']['currency'];
  }
  else {
    $currency_code = $default_currency['code'];
  }

  $discount_amount = floatval(($grand_total / 100) * 11);

  // Remaining points.
  $current_points = userpoints_get_current_points($user->uid);

  // Get exchange rate.
  $conversion_rate = $currencies[$currency_code]['conversion_rate'];

  if (!isset($conversion_rate)) {
    $conversion_rate = 1;
  }

  // Convert exchange rate to currency.
  $points_as_currency = $current_points * $conversion_rate;

  // Smaller amount in discount amount and remaining points. (4.30 to 4.00)
  $remaining_discount_amount = floor(min($discount_amount, $points_as_currency));

  $_SESSION['k11_remaining_discount_amount'] = $remaining_discount_amount;

  // Convert points as currency to points
  $points_can_be_used = $remaining_discount_amount / $conversion_rate;

  $_SESSION['k11_points_can_be_used'] = $points_can_be_used;
  $_SESSION['k11_order_details'] = $order_details;

   // apply_k11_userpoints($points_can_be_used, $order_details, true);
}

function apply_k11_userpoints_callback($apply) {
  $k11_points_can_be_used  = $k11_order_details = NULL;

  if(isset($_SESSION['k11_points_can_be_used'])) {
    $k11_points_can_be_used = $_SESSION['k11_points_can_be_used'];
  }

  if(isset($_SESSION['k11_order_details'])) {
    $k11_order_details = $_SESSION['k11_order_details'];
  }

  if(!is_null($k11_points_can_be_used  ) && !is_null($k11_order_details)) {
    apply_k11_userpoints($k11_points_can_be_used, $k11_order_details, $apply);
  } else {
    return drupal_json_output('POINTS_OR_ORDERS_NOT_EXISTS');
  }
}

function apply_k11_userpoints($points_can_be_used, $order_details, $apply) {
  global $user;

  if(!$apply) {
    // Delete all userpoints line items on an order.
    foreach ($order_details as $order_item) {
      commerce_userpoints_discount_clear_order($order_item['order_id']);
    }

    $_SESSION['k11_royalty_set'] = 0;

    return drupal_json_output('ROYALTY_REMOVED');
  }

  $partial_points  = intval($points_can_be_used/ count($order_details));

  for($i = 0; $i < count($order_details); $i++) {
    $order_details[$i]['points'] = $partial_points;
  }

  // Remaining points added to the first order
  $order_details[0]['points'] += $points_can_be_used - ($partial_points * count($order_details));

  foreach ($order_details as $order_item) {
    $order_id = $order_item['order_id'];
    $points = $order_item['points'];

    $line_item_id = commerce_userpoints_discount_order_has_userpoint_line_item($order_id);

    // If there is no existing userpoints line item, we create a new one.
    if ($line_item_id == NULL) {
      // Create the line item.
      $line_item = commerce_userpoints_discount_line_item_factory_new($order_id);

      // Create the userpoints transaction.
      $userpoints_params = array(
        'points' => $points * -1,
        'uid' => $user->uid,
        'operation' => 'commerce_userpoints_discount_credit',
        'tid' => variable_get('commerce_userpoints_discount_default_termid', userpoints_get_default_tid()),
        'display' => FALSE,
        'entity_id' => $order_id,
        'entity_type' => 'commerce_order',
      );

      $result = userpoints_userpointsapi($userpoints_params);

      if ($result['status'] == FALSE) {
        form_set_error("commerce_userpoints_discount][amount", t("Sorry, you cannot use your !points right now. Please contact us for more information", userpoints_translation()));

        return FALSE;
      }
    }
    else {
      // If there is an existing userpoints line item for this order, we load it to get its userpoints transaction id.
      $line_item = commerce_line_item_load($line_item_id);

      // Get the existing transaction.
      $txn_field = field_get_items('commerce_line_item', $line_item, 'commerce_userpoints_discount_transaction');

      // Clear out the old $line_item.
      commerce_userpoints_discount_clear_order($order_id);
      unset($line_item);

      // Update the userpoints transaction.
      $userpoints_params = array(
        'points' => $points * -1,
        'txn_id' => $txn_field[0]['value'],
        'status' => 0,
      );

      $result = userpoints_userpointsapi($userpoints_params);

      if ($result['status'] == FALSE) {
        form_set_error("commerce_userpoints_discount][amount", t("Sorry, you cannot use your !points right now. Please contact us for more information", userpoints_translation()));

        return FALSE;
      }

      // Create the new line item.
      $line_item = commerce_userpoints_discount_line_item_factory_new($order_id);
    }

    $result['transaction']['points'] *= 100;
    $label = t("User credit");

    commerce_userpoints_discount_line_item_populate(
      $line_item, $order_id,
      $result['transaction'], commerce_default_currency(), $label);

    commerce_userpoints_discount_line_item_save($line_item);
  }

  $_SESSION['k11_royalty_set'] = 1;

  return drupal_json_output('ROYALTY_APPLIED');
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function ______commerce_userpoints_discount_kirana11_form_commerce_checkout_form_checkout_alter(&$form, &$form_state, $form_id) {
  $currencies = commerce_userpoints_currencies();
  $default_currency = reset($currencies);

  if (isset($form_state['values']['commerce_userpoints_discount']['currency'])) {
    $currency_code = $form_state['values']['commerce_userpoints_discount']['currency'];
  }
  else {
    $currency_code = $default_currency['code'];
  }

  $commerce_order_total = $form_state['build_info']['args'][0]->commerce_order_total;
  $commerce_order_total_amount = floatval($commerce_order_total['und'][0]['data']['components'][0]['price']['amount'] / 100);

  $discount_amount = floatval(($commerce_order_total_amount / 100) * 11);

  // Remaining points.
  $current_points = userpoints_get_current_points($form_state['build_info']['args'][0]->uid);

  // Get exchange rate.
  $conversion_rate = $currencies[$currency_code]['conversion_rate'];

  if (!isset($conversion_rate)) {
    $conversion_rate = 1;
  }

  // Convert exchange rate to currency.
  $points_as_currency = $current_points * $conversion_rate;

  // Smaller amount in discount amount and remaining points. (4.30 to 4.00)
  $remaining_discount_amount = floor(min($discount_amount, $points_as_currency));

  // Convert points as currency to points
  $points_can_be_used = $remaining_discount_amount / $conversion_rate;

  $line_item_id = commerce_userpoints_discount_order_has_userpoint_line_item($form_state['build_info']['args'][0]->order_number);

  // If there is no existing userpoints line item, we create a new one.
  if ($line_item_id == NULL) {
    // Create the line item.
    $line_item = commerce_userpoints_discount_line_item_factory_new($form_state['build_info']['args'][0]->order_number);

    // Create the userpoints transaction.
    $userpoints_params = array(
      'points' => intval($points_can_be_used) * -1,
      'uid' => $form_state['build_info']['args'][0]->uid,
      'operation' => 'commerce_userpoints_discount_credit',
      'tid' => variable_get('commerce_userpoints_discount_default_termid', userpoints_get_default_tid()),
      'display' => FALSE,
      'entity_id' => $form_state['build_info']['args'][0]->order_number,
      'entity_type' => 'commerce_order',
    );

    $result = userpoints_userpointsapi($userpoints_params);

    if ($result['status'] == FALSE) {
      form_set_error("commerce_userpoints_discount][amount", t("Sorry, you cannot use your !points right now. Please contact us for more information", userpoints_translation()));
      return FALSE;
    }

    $label = "User credit";
    commerce_userpoints_discount_line_item_populate(
      $line_item, $form_state['build_info']['args'][0]->order_number,
      $result['transaction'], commerce_default_currency(), $label);

    commerce_userpoints_discount_line_item_save($line_item);
  }
  else {
    // If there is an existing userpoints line item for this order, we load it to get its userpoints transaction id.
    $line_item = commerce_line_item_load($line_item_id);

    // Get the existing transaction.
    $txn_field = field_get_items('commerce_line_item', $line_item, 'commerce_userpoints_discount_transaction');

    // Clear out the old $line_item.
    commerce_userpoints_discount_clear_order($form_state['build_info']['args'][0]->order_number);
    unset($line_item);

    // Update the userpoints transaction.
    $userpoints_params = array(
      'points' => intval($points_can_be_used) * -1,
      'txn_id' => $txn_field[0]['value'],
      'status' => 0,
    );
    $result = userpoints_userpointsapi($userpoints_params);

    if ($result['status'] == FALSE) {
      form_set_error("commerce_userpoints_discount][amount", t("Sorry, you cannot use your !points right now. Please contact us for more information", userpoints_translation()));
      return FALSE;
    }

    // Create the new line item.
    $line_item = commerce_userpoints_discount_line_item_factory_new($form_state['build_info']['args'][0]->order_number);

    $label = t("User credit");
    commerce_userpoints_discount_line_item_populate(
      $line_item, $form_state['build_info']['args'][0]->order_number,
      $result['transaction'], commerce_default_currency(), $label);

    commerce_userpoints_discount_line_item_save($line_item);
  }

  // Convert points as currency to points
  //$points_can_be_used = $remaining_discount_amount / $conversion_rate;

//  $form["commerce_userpoints_discount"]['info']['available']['#access'] = FALSE;
//  $form["commerce_userpoints_discount"]['info']['exchange']['#access'] = FALSE;
//  $form["commerce_userpoints_discount"]["amount"]['#disabled'] = TRUE;
//  $form["commerce_userpoints_discount"]["amount"]['#title'] = t('Eligible loyalty discount amount (₹)');
//  $form["commerce_userpoints_discount"]["amount"]['#default_value'] = number_format((float)$remaining_discount_amount, 2, '.', '');
//  $form["commerce_userpoints_discount"]["amount"]['#description'] = '';
}


/**
 * Function to Get User's current month's Loyalty points Balance.
*/
function get_current_month_loyalty_points() {
  global $user;

  $query = db_select('userpoints_txn', 'ut');
  $query->fields('ut',array('points'));
  $query->condition('status','0')
    ->condition('uid', $user->uid);

  $query->where('MONTH(FROM_UNIXTIME(time_stamp)) = :monthid', array(':monthid' => date('m')));

  $points_list = $query->execute()->fetchAll();

  $total_points_spend = 0;

  foreach($points_list as $points){
    if($points->points != '111'){
      $total_points_spend += $points->points;
    }
  }

  $total_points_spend *= -1;

  $monthly_allocated_points = 111;
  $available_points = $monthly_allocated_points - $total_points_spend;

  $date1 = gmdate("Y-m-d", $user->created);
  $date2 = date('Y-m-d');

  $ts1 = strtotime($date1);
  $ts2 = strtotime($date2);

  $year1 = date('Y', $ts1);
  $year2 = date('Y', $ts2);

  $month1 = date('m', $ts1);
  $month2 = date('m', $ts2);

  $months_passed = (($year2 - $year1) * 12) + ($month2 - $month1);
  $a_date = date('d M Y');

  if($months_passed <= 4) {
    $total_balance_available = 555 - (111 * $months_passed) - $total_points_spend;

    $html_location = '<div class="loyalty-outer-text">
        <p>It\'s a new beginning and it\'s our promise to make you save every time you shop with us. Just register with us and get your shubh shagun of Rs 555 in your kirana11.com account. Keep shopping with us every month to save more by redeeming your shubh shagun of Rs 555. Happy Kiranaing!</p>
    </div>
    <div class="loyalty-outer-points">
        <div class="loyalty-avilable-points">
            <span>Available balance</span>
            <p>&#x20B9;<strong>' . $total_balance_available . '</strong></p>
        </div>
    <div class="loyalty-current-month-points">
    <span>Current month balance</span>
    <p>&#x20B9;<strong>' . $available_points . '</strong><sup>*</sup></p>
   </div>
   <div class="loyalty-notes">*Expires on '. date("t M Y", strtotime($a_date)). '</div></div>';
  } else {
    $html_location = "<div class='loyalty-outer-points'><p>Your Shubh shagun voucher is expired. Don't worry you can still save big on your every purchase with our other discount coupons.</p></div>";
  }

  return $html_location;
}

/**
 * Implements hook_block_info().
 */
function commerce_userpoints_discount_kirana11_block_info() {
  $blocks = [];

  $blocks['users_loyalty_points_balance'] = array(
    'info' => t('Users Current Month Loyalty Points Balance'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function commerce_userpoints_discount_kirana11_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'users_loyalty_points_balance':
      $block['content'] = get_current_month_loyalty_points();
      break;
  }

  return $block;
}

/**
 * Implements hook_commerce_cart_order_refresh().
 *
 * Update the loyalty according to the line items change.
 */
function commerce_userpoints_discount_kirana11_commerce_cart_order_refresh(EntityDrupalWrapper $order_wrapper) {
  $points_to_apply = calculate_userpoints($order_wrapper);

  foreach ($order_wrapper->commerce_line_items as $delta => $wrapper_line_item) {
    if($wrapper_line_item->getBundle() == 'userpoints') {
      $line_item = $wrapper_line_item->value();

      $current_points = $line_item->commerce_unit_price['und'][0]['amount'];

      if($points_to_apply > $current_points) {
        // Take remaining points.
//        $points_on_edit = ($points_to_apply - $current_points);
        $operation = 'cu_discount_refund_remaining_points';
      } else {
        // Refund point.
//        $points_on_edit = ($points_to_apply - $current_points);
        $operation = 'cu_discount_took_remaining_points';
      }

      $points_on_edit = ($points_to_apply - $current_points);

      $points_on_edit = floor($points_on_edit / 100);

      // Refund the userpoints transaction.
      $userpoints_params = array(
        'points' => $points_on_edit,
        'uid' => $order_wrapper->uid->value(),
        'operation' => $operation,
        'tid' => variable_get('commerce_userpoints_discount_default_termid', userpoints_get_default_tid()),
        'display' => FALSE,
        'entity_id' => $order_wrapper->order_id->value(),
        'entity_type' => 'commerce_order',
      );

      userpoints_userpointsapi($userpoints_params);

      $line_item->commerce_unit_price['und'][0]['amount'] = $points_to_apply;
      $line_item->commerce_unit_price['und'][0]['data']['components'][0]['price']['amount'] = $points_to_apply;

      $line_item->commerce_total['und'][0]['amount'] = $points_to_apply;
      $line_item->commerce_total['und'][0]['data']['components'][0]['price']['amount'] = $points_to_apply;

      commerce_line_item_save($line_item);
    }
  }

  commerce_order_save($order_wrapper->value());
}

/**
 * Calculate user points
 *
 * Useful link: https://gist.github.com/St0iK/64f66c0f2cc5f24a361f
 */
function calculate_userpoints($order_wrapper) {
  $grand_total = 0;

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $line_item_type = $line_item_wrapper->type->value();

    if ($line_item_type == 'product') {
      $grand_total += $line_item_wrapper->commerce_total->amount->value();
    }
  }

  $grand_total = floatval($grand_total / 100);

  $grand_total = number_format((float)$grand_total, 2, '.', '');

  $discount_amount = floatval(($grand_total / 100) * 11);

  // Get exchange rate.
  $currencies = commerce_userpoints_currencies();

  $default_currency = reset($currencies);
  $currency_code = $default_currency['code'];

  // Get exchange rate.
  $conversion_rate = $currencies[$currency_code]['conversion_rate'];

  if (!isset($conversion_rate)) {
    $conversion_rate = 1;
  }

  // Remaining points.
  $current_points = userpoints_get_current_points($order_wrapper->uid->value());

  // Convert exchange rate to currency.
  $points_as_currency = $current_points * $conversion_rate;

  // Smaller amount in discount amount and remaining points. (4.30 to 4.00)
  $remaining_discount_amount = floor(min($discount_amount, $points_as_currency));

  // Get exchange rate.
  $currencies = commerce_userpoints_currencies();

  $default_currency = reset($currencies);
  $currency_code = $default_currency['code'];

  // Get exchange rate.
  $conversion_rate = $currencies[$currency_code]['conversion_rate'];

  if (!isset($conversion_rate)) {
    $conversion_rate = 1;
  }

  // Convert points as currency to points
  $points_can_be_used = $remaining_discount_amount / $conversion_rate;

  $points_can_be_used = $points_can_be_used * -100;

  return $points_can_be_used;
}

/**
 * Implements hook_commerce_order_delete().
 * Note: Not necessary, approved points will decline by default.
 */
function _____commerce_userpoints_discount_kirana11_commerce_order_delete($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  foreach ($order_wrapper->commerce_line_items as $delta => $wrapper_line_item) {
    if($wrapper_line_item->getBundle() == 'userpoints') {
      $line_item = $wrapper_line_item->value();

      $points_to_refund = $line_item->commerce_unit_price['und'][0]['amount'];

      // Refund the userpoints transaction.
      $userpoints_params = array(
        'points' => $points_to_refund * -1,
        'uid' => $order_wrapper->uid->value(),
        'operation' => 'cu_discount_refund_on_order_cancellation',
        'tid' => variable_get('commerce_userpoints_discount_default_termid', userpoints_get_default_tid()),
        'display' => FALSE,
        'entity_id' => $order_wrapper->order_id->value(),
        'entity_type' => 'commerce_order',
      );

      $result = userpoints_userpointsapi($userpoints_params);
    }
  }
}